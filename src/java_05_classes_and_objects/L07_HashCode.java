package java_05_classes_and_objects;

public class L07_HashCode {
    public static void main(String[] args) {
        Animal animal = new Animal();

        System.out.println(animal.hashCode());
    }
}

/*
 * =============
 * Hash Code
 * =============
 * 
 * hashCode() method is inherited from Object class.
 * 
 * Returns a hash code value for the object. This method is supported for the
 * benefit of hash tables such as those provided by java.util.HashMap.
 * 
 * A hash code is an integer value generated by hashing algorithm. It is used to
 * uniquely identify an object within a hash-based collection. The purpose of
 * the hash code is to allow efficient storage and retrieval of objects by
 * minimizing the number of comparisons needed.
 * 
 * Whenever it is invoked on the same object more than once during an execution
 * of a Java application, the hashCode() method must consistently return the
 * same integer, provided no information used in equals() comparisons on the
 * object is modified. This integer need not remain consistent from one
 * execution of an application to another execution of the same application.
 * 
 * ===================================
 * equals() and hashCode() relation
 * ===================================
 * 
 * If two objects are equal according to the equals() method, then
 * calling the hashCode() method on each of the two objects must produce the
 * same integer result.
 * 
 * It is not required that if two objects are unequal according to the
 * equals() method, then calling the hashCode() method on each of the
 * two objects must produce distinct integer results. However, the programmer
 * should be aware that producing distinct integer results for unequal objects
 * may improve the performance of hash tables.
 * 
 * 
 * ==========================
 * Hash based collections
 * ==========================
 * 
 * a. hashCode()
 * - When you put a key-value pair into the HashMap, the hashCode() method of
 * the key is used to compute the hash code. This hash code determines the
 * bucket in which the entry will be placed.
 * - During retrieval (calling get()), the hashCode() method is used again to
 * find the correct bucket where the key may be present.
 * 
 * 
 * b. equals()
 * - After locating the correct bucket using the hashCode(), the HashMap will
 * iterate through the entries in that bucket and use the equals() method to
 * find the exact key-value pair. This is necessary because different keys might
 * have the same hash code (collisions), so the equals() method is used to
 * ensure the exact match of the key.
 * 
 * 
 * Suppose Car class implements only equals() based on brand and model field.
 * We create hashset and add 2 instances with same brand and model in the
 * hashset.
 * Both instances will be added in the set even though equals() returns true.
 * This is because hashcode of both instances will be different.
 * Therefore, it is important to override hashCode() method along with equals()
 * and return hashcode based on same fiels as in equals().
 * 
 * 
 * ==================
 * Explanation
 * ==================
 * 
 * In short, if two objects are considered equal (x.equals(y) is true), then
 * they must have the same hash code (x.hashCode() == y.hashCode()).
 * However, the reverse is not required: two objects having the same hash code
 * do not necessarily have to be equal.
 * 
 * If equals() is inconsistent with hashCode(), objects that are equal might end
 * up in different buckets in a hash-based collection, leading to issues with
 * retrieval, deletion, and other operations.
 * This can cause unexpected behaviour and bugs that are often difficult to
 * track down.
 * 
 * 
 */